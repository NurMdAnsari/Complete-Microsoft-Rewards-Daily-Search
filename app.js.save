const express = require('express');
const app = express();
const mongoose =require('mongoose');
const axios = require('axios');
const useragent = require('express-useragent')
const data = require('./public/all.json');
require('dotenv').config();

app.disable('x-powered-by');

mongoose.set("strictQuery",false);
mongoose.connect(process.env.MONGO_URI,{dbName:'msr'})
.then(()=>{console.log('connected to db')})
.catch((err)=>{console.log('err')});

let msip = new mongoose.Schema({
ip:String,
country:String,
country_code:String,
region:String,
city:String,
current_time:String,
ind_time:String,
time:{type:Date,default:Date.now()

}
})

let Ipad = mongoose.model('ip',msip);

app.use(express.static('public'))
app.set('view engine','ejs');
app.set('trust proxy', true);


app.get('/',async(req,res)=>{
  let source = req.headers['user-agent']
  let ua = useragent.parse(source);
  let isMobile = ua.isMobile;

// get ip info
let ip;
if(req.ip.length>=6 && !(req.ip.includes('192.168'))){
  ip = req.ip;
}else{
  ip = '1.1.1.1';
}

try{
  let random = Math.floor(Math.random()*3);
let api = [
`https://ipgeolocation.abstractapi.com/v1/?api_key=${process.env.GEO_API_KEY1}&ip_address=`,
`https://ipgeolocation.abstractapi.com/v1/?api_key=${process.env.GEO_API_KEY2}&ip_address=`,
`https://ipgeolocation.abstractapi.com/v1/?api_key=${process.env.GEO_API_KEY3}&ip_address=`
]

 let ipinfo = await axios.get(`${api[random]}${ip}`);

if(ipinfo.data.hasOwnProperty('error')){
  res.render('home',{country_code:'unavailable',isMobile:isMobile});
  console.log(ipinfo.data.error);
  throw new Error('ipinfo error');
}
 // ipinfo data varibales
 let country = ipinfo.data.country;
 let country_code = ipinfo.data.country_code;
 let region = ipinfo.data.region;
 let city = ipinfo.data.city;
 let current_time = ipinfo.data.timezone.current_time;
 res.render('home',{country_code:country_code,isMobile:isMobile});
 try{

let date = new Date();

const options = {
  timeZone: "Asia/Kolkata",
  year: "numeric",
  month: "2-digit",
  day: "2-digit",
  hour: "2-digit",
  minute: "2-digit",
  second: "2-digit",
};

const istTime = date.toLocaleString("en-IN", options);

  // save data to db
     let info= new Ipad({
      ip:req.ip,
      country:country,
      country_code:country_code,
      region:region,
      city:city,
      current_time:current_time,
      ind_time:istTime,
  });
  
  info.save().catch((err)=>{console.log(err)});
  }catch(err){
    console.log(err);
    return;
  }
//main homepage
  
}catch(err){
  res.render('home',{country_code:'Error',isMobile:isMobile});
console.log(err);

return;
}


})

app.get('/word',(req,res)=>{
 try{
  if(req.query.hasOwnProperty('number')&& !isNaN(req.query.number)){
    let number = Math.floor(Math.abs(req.query.number));
  let array = [];

   if(number>0 && number<=100){
    while(number>0){
      let random = Math.floor(Math.random()*data.length);
      array.push(data[random]);
    number--;
    }
    res.status(200).json(array);
   }else{
    res.status(400).json('number is not in range');
   }
   }else{
    res.status(400).json('400 Bad Request');
  }
}catch(err){
  console.log(err);
  res.status(500).send('500 Internal Server Error');
}
})

app.listen(9005,(err)=>{
    if(err){
      console.log(err);
      return;
    }
    console.log('Server is Started');
})
